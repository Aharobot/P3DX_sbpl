"""autogenerated by genmsg_py from sonar_msg.msg. Do not edit."""
import roslib.message
import struct


class sonar_msg(roslib.message.Message):
  _md5sum = "3221f0e712ce0872a2817eb45ca4e0f2"
  _type = "P3DX_sbpl/sonar_msg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool l
bool fl
bool f 
bool fr
bool r
int8 direction

"""
  __slots__ = ['l','fl','f','fr','r','direction']
  _slot_types = ['bool','bool','bool','bool','bool','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       l,fl,f,fr,r,direction
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(sonar_msg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.l is None:
        self.l = False
      if self.fl is None:
        self.fl = False
      if self.f is None:
        self.f = False
      if self.fr is None:
        self.fr = False
      if self.r is None:
        self.r = False
      if self.direction is None:
        self.direction = 0
    else:
      self.l = False
      self.fl = False
      self.f = False
      self.fr = False
      self.r = False
      self.direction = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_5Bb.pack(_x.l, _x.fl, _x.f, _x.fr, _x.r, _x.direction))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.l, _x.fl, _x.f, _x.fr, _x.r, _x.direction,) = _struct_5Bb.unpack(str[start:end])
      self.l = bool(self.l)
      self.fl = bool(self.fl)
      self.f = bool(self.f)
      self.fr = bool(self.fr)
      self.r = bool(self.r)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_5Bb.pack(_x.l, _x.fl, _x.f, _x.fr, _x.r, _x.direction))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.l, _x.fl, _x.f, _x.fr, _x.r, _x.direction,) = _struct_5Bb.unpack(str[start:end])
      self.l = bool(self.l)
      self.fl = bool(self.fl)
      self.f = bool(self.f)
      self.fr = bool(self.fr)
      self.r = bool(self.r)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_5Bb = struct.Struct("<5Bb")
