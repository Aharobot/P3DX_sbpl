"""autogenerated by genmsg_py from start_msg.msg. Do not edit."""
import roslib.message
import struct


class start_msg(roslib.message.Message):
  _md5sum = "18d88bbdb2a157a3376fd0d1b689d3b3"
  _type = "P3DX_sbpl/start_msg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int8 width 
int8 height
int8 startx
int8 starty
int8 goalx
int8 goaly
char obsthresh

"""
  __slots__ = ['width','height','startx','starty','goalx','goaly','obsthresh']
  _slot_types = ['int8','int8','int8','int8','int8','int8','char']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       width,height,startx,starty,goalx,goaly,obsthresh
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(start_msg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.width is None:
        self.width = 0
      if self.height is None:
        self.height = 0
      if self.startx is None:
        self.startx = 0
      if self.starty is None:
        self.starty = 0
      if self.goalx is None:
        self.goalx = 0
      if self.goaly is None:
        self.goaly = 0
      if self.obsthresh is None:
        self.obsthresh = 0
    else:
      self.width = 0
      self.height = 0
      self.startx = 0
      self.starty = 0
      self.goalx = 0
      self.goaly = 0
      self.obsthresh = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_6bB.pack(_x.width, _x.height, _x.startx, _x.starty, _x.goalx, _x.goaly, _x.obsthresh))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.width, _x.height, _x.startx, _x.starty, _x.goalx, _x.goaly, _x.obsthresh,) = _struct_6bB.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_6bB.pack(_x.width, _x.height, _x.startx, _x.starty, _x.goalx, _x.goaly, _x.obsthresh))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.width, _x.height, _x.startx, _x.starty, _x.goalx, _x.goaly, _x.obsthresh,) = _struct_6bB.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_6bB = struct.Struct("<6bB")
