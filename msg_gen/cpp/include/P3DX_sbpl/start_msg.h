/* Auto-generated by genmsg_cpp for file /home/abhishek/ros_workspace/abhishek/P3DX_sbpl/msg/start_msg.msg */
#ifndef P3DX_SBPL_MESSAGE_START_MSG_H
#define P3DX_SBPL_MESSAGE_START_MSG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace P3DX_sbpl
{
template <class ContainerAllocator>
struct start_msg_ {
  typedef start_msg_<ContainerAllocator> Type;

  start_msg_()
  : width(0)
  , height(0)
  , startx(0)
  , starty(0)
  , goalx(0)
  , goaly(0)
  , obsthresh(0)
  {
  }

  start_msg_(const ContainerAllocator& _alloc)
  : width(0)
  , height(0)
  , startx(0)
  , starty(0)
  , goalx(0)
  , goaly(0)
  , obsthresh(0)
  {
  }

  typedef int8_t _width_type;
  int8_t width;

  typedef int8_t _height_type;
  int8_t height;

  typedef int8_t _startx_type;
  int8_t startx;

  typedef int8_t _starty_type;
  int8_t starty;

  typedef int8_t _goalx_type;
  int8_t goalx;

  typedef int8_t _goaly_type;
  int8_t goaly;

  typedef uint8_t _obsthresh_type;
  uint8_t obsthresh;


private:
  static const char* __s_getDataType_() { return "P3DX_sbpl/start_msg"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "18d88bbdb2a157a3376fd0d1b689d3b3"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int8 width \n\
int8 height\n\
int8 startx\n\
int8 starty\n\
int8 goalx\n\
int8 goaly\n\
char obsthresh\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, width);
    ros::serialization::serialize(stream, height);
    ros::serialization::serialize(stream, startx);
    ros::serialization::serialize(stream, starty);
    ros::serialization::serialize(stream, goalx);
    ros::serialization::serialize(stream, goaly);
    ros::serialization::serialize(stream, obsthresh);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, width);
    ros::serialization::deserialize(stream, height);
    ros::serialization::deserialize(stream, startx);
    ros::serialization::deserialize(stream, starty);
    ros::serialization::deserialize(stream, goalx);
    ros::serialization::deserialize(stream, goaly);
    ros::serialization::deserialize(stream, obsthresh);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(width);
    size += ros::serialization::serializationLength(height);
    size += ros::serialization::serializationLength(startx);
    size += ros::serialization::serializationLength(starty);
    size += ros::serialization::serializationLength(goalx);
    size += ros::serialization::serializationLength(goaly);
    size += ros::serialization::serializationLength(obsthresh);
    return size;
  }

  typedef boost::shared_ptr< ::P3DX_sbpl::start_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::P3DX_sbpl::start_msg_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct start_msg
typedef  ::P3DX_sbpl::start_msg_<std::allocator<void> > start_msg;

typedef boost::shared_ptr< ::P3DX_sbpl::start_msg> start_msgPtr;
typedef boost::shared_ptr< ::P3DX_sbpl::start_msg const> start_msgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::P3DX_sbpl::start_msg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::P3DX_sbpl::start_msg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace P3DX_sbpl

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::P3DX_sbpl::start_msg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::P3DX_sbpl::start_msg_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::P3DX_sbpl::start_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "18d88bbdb2a157a3376fd0d1b689d3b3";
  }

  static const char* value(const  ::P3DX_sbpl::start_msg_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x18d88bbdb2a157a3ULL;
  static const uint64_t static_value2 = 0x376fd0d1b689d3b3ULL;
};

template<class ContainerAllocator>
struct DataType< ::P3DX_sbpl::start_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "P3DX_sbpl/start_msg";
  }

  static const char* value(const  ::P3DX_sbpl::start_msg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::P3DX_sbpl::start_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 width \n\
int8 height\n\
int8 startx\n\
int8 starty\n\
int8 goalx\n\
int8 goaly\n\
char obsthresh\n\
\n\
";
  }

  static const char* value(const  ::P3DX_sbpl::start_msg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::P3DX_sbpl::start_msg_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::P3DX_sbpl::start_msg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.width);
    stream.next(m.height);
    stream.next(m.startx);
    stream.next(m.starty);
    stream.next(m.goalx);
    stream.next(m.goaly);
    stream.next(m.obsthresh);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct start_msg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::P3DX_sbpl::start_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::P3DX_sbpl::start_msg_<ContainerAllocator> & v) 
  {
    s << indent << "width: ";
    Printer<int8_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<int8_t>::stream(s, indent + "  ", v.height);
    s << indent << "startx: ";
    Printer<int8_t>::stream(s, indent + "  ", v.startx);
    s << indent << "starty: ";
    Printer<int8_t>::stream(s, indent + "  ", v.starty);
    s << indent << "goalx: ";
    Printer<int8_t>::stream(s, indent + "  ", v.goalx);
    s << indent << "goaly: ";
    Printer<int8_t>::stream(s, indent + "  ", v.goaly);
    s << indent << "obsthresh: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.obsthresh);
  }
};


} // namespace message_operations
} // namespace ros

#endif // P3DX_SBPL_MESSAGE_START_MSG_H

